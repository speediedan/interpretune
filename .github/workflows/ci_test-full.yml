name: Test full

on:
  push:
    branches: [main, "release/*", "bugfix/*"]
    paths:
      - "setup.*"
      - "requirements.txt"
      - "pyproject.toml"
      - ".codecov.yml"
      - "tests/**"
      - "src/**"
      - "requirements/**"
      - ".github/workflows/ci_test-full.yml"
      - ".actions/**"
      # Exclude documentation-only files from triggering
      - "!docs/**"
      - "!**/*.md"
      - "!**/*.rst"
      - "!mkdocs.yml"
      - "!**/CHANGELOG.md"
      - "!**/CODE_OF_CONDUCT.md"
      - "!**/CONTRIBUTING.md"
      - "!**/LICENSE*"
  pull_request:
    branches: [main, "release/*", "bugfix/*"]
    types: [opened, reopened, ready_for_review, synchronize]
    paths:
      - "setup.*"
      - "requirements.txt"
      - "pyproject.toml"
      - ".codecov.yml"
      - "tests/**"
      - "src/**"
      - "requirements/**"
      - ".github/workflows/ci_test-full.yml"
      - ".actions/**"
      # Exclude documentation-only files from triggering
      - "!docs/**"
      - "!**/*.md"
      - "!**/*.rst"
      - "!mkdocs.yml"
      - "!**/CHANGELOG.md"
      - "!**/CODE_OF_CONDUCT.md"
      - "!**/CONTRIBUTING.md"
      - "!**/LICENSE*"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref }}
  cancel-in-progress: ${{ ! (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/')) }}

jobs:
  cpu:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [
          ubuntu-22.04,
          windows-2022,
          macos-14
          ]
        python-version: ["3.12"]
    timeout-minutes: 90
    env:
      # uncomment to enable more granular logging for this workflow
      # IT_CI_LOG_LEVEL: "DEBUG"
      # CI_RESOURCE_MONITOR: "1"
      IT_USE_CT_COMMIT_PIN: "1"
      USE_CT_COMMIT_PIN: "1"
      WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}
      HF_GATED_PUBLIC_REPO_AUTH_KEY: ${{ secrets.HF_GATED_PUBLIC_REPO_AUTH_KEY }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install libpq (macOS only)
        if: runner.os == 'macOS'
        run: |
          brew install libpq
          brew link --force libpq
      - name: Set up venv and install dependencies (all OS)
        shell: bash
        run: |
          python -m pip install --upgrade pip setuptools wheel build
          python -m pip install '.[test,examples,lightning]' -c requirements/ci_constraints.txt
          pip install --upgrade datasets
          pip install --upgrade fsspec
          pip list
      - name: Run tests, coverage, and resource monitor
        shell: bash
        env:
          # Make CI resource monitor configurable via CI_RESOURCE_MONITOR (repo default: '0')
          CI_RESOURCE_MONITOR: ${{ env.CI_RESOURCE_MONITOR }}
          PYTHONPATH: ${{ github.workspace }}/src
          # Make log level configurable via IT_CI_LOG_LEVEL (repo default: 'INFO')
          PYTEST_ADDOPTS: "--log-cli-level=${{ env.IT_CI_LOG_LEVEL }} --log-cli-format='%(asctime)s [%(levelname)8s] %(name)s: %(message)s' --capture=no"
          # Optional: filter pattern for pytest (-k), disables coverage if set
          PYTEST_FILTER_PATTERN: ${{ env.PYTEST_FILTER_PATTERN || '' }}
        run: |
          if [ -n "$PYTEST_FILTER_PATTERN" ]; then
            echo "PYTEST_FILTER_PATTERN is set to '$PYTEST_FILTER_PATTERN'. Disabling coverage collection and running filtered tests only."
            PYTEST_CMD="pytest src/interpretune tests -v --import-mode=importlib --durations=50 -k \"$PYTEST_FILTER_PATTERN\" --junitxml=junit/test-results-${{ runner.os }}-py${{ matrix.python-version }}.xml"
          else
            PYTEST_CMD="coverage run --append --source src/interpretune -m pytest src/interpretune tests -v --import-mode=importlib --durations=50 --junitxml=junit/test-results-${{ runner.os }}-py${{ matrix.python-version }}.xml"
          fi
          if [ "${{ runner.os }}" = "Linux" ]; then
            chmod +x ./scripts/ci_resource_monitor.sh
            ./scripts/ci_resource_monitor.sh &
            monitor_pid=$!
            eval $PYTEST_CMD
            kill $monitor_pid || true
          else
            eval $PYTEST_CMD
          fi
      - name: Upload pytest results
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results-${{ runner.os }}-${{ matrix.python-version }}
          path: junit/test-results-${{ runner.os }}-py${{ matrix.python-version }}.xml
        if: failure()
      - name: Statistics
        if: success()
        run: |
          coverage report
          coverage xml
