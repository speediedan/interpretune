name: Type Check

on:
  push:
    branches: [main, "release/*", "bugfix/*", "feature/*"]
    paths:
      - "setup.*"
      - "requirements.txt"
      - "pyproject.toml"
      - "src/**"
      - "requirements/**"
      - ".github/workflows/type-check.yml"
      # Exclude documentation-only files from triggering
      - "!docs/**"
      - "!**/*.md"
      - "!**/*.rst"
      - "!mkdocs.yml"
      - "!**/CHANGELOG.md"
      - "!**/CODE_OF_CONDUCT.md"
      - "!**/CONTRIBUTING.md"
      - "!**/LICENSE*"
  pull_request:
    branches: [main, "release/*", "bugfix/*", "feature/*"]
    types: [opened, reopened, ready_for_review, synchronize]
    paths:
      - "setup.*"
      - "requirements.txt"
      - "pyproject.toml"
      - "src/**"
      - "requirements/**"
      - ".github/workflows/type-check.yml"
      # Exclude documentation-only files from triggering
      - "!docs/**"
      - "!**/*.md"
      - "!**/*.rst"
      - "!mkdocs.yml"
      - "!**/CHANGELOG.md"
      - "!**/CODE_OF_CONDUCT.md"
      - "!**/CONTRIBUTING.md"
      - "!**/LICENSE*"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref }}
  cancel-in-progress: ${{ ! (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/')) }}

jobs:
  type-check:
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    env:
      IT_USE_CT_COMMIT_PIN: "1"
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Reset caching
        id: set_time_period
        run: |
          python -c "import time; days = time.time() / 60 / 60 / 24; print(f'TIME_PERIOD=d{int(days / 7) * 7}')" >> $GITHUB_OUTPUT

      - name: Get pip cache dir
        id: pip-cache
        shell: bash
        run: |
          echo "PIP_CACHE_DIR=$(pip cache dir)" >> $GITHUB_ENV

      - name: pip cache
        uses: actions/cache@v4
        with:
          path: ${{ env.PIP_CACHE_DIR }}/wheels
          key: ubuntu-22.04-pip-wheels-${{ steps.set_time_period.outputs.TIME_PERIOD }}-py3.12-${{ hashFiles('requirements/ci/requirements.txt') }}-${{ hashFiles('requirements/post_upgrades.txt') }}-${{ hashFiles('requirements/platform_dependent.txt') }}
          restore-keys: |
            ubuntu-22.04-pip-wheels-${{ steps.set_time_period.outputs.TIME_PERIOD }}-py3.12-

      - name: Set up venv and install ci dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip setuptools wheel build --cache-dir "$PIP_CACHE_DIR"
          # Prefer CI pinned requirements if present
          if [ -f requirements/ci/requirements.txt ]; then
            pip install -r requirements/ci/requirements.txt --cache-dir "$PIP_CACHE_DIR"
            python -m pip install -e '.[test,examples,lightning]' --cache-dir "$PIP_CACHE_DIR"
          else
            python -m pip install -e '.[test,examples,lightning]' -c requirements/ci_constraints.txt --cache-dir "$PIP_CACHE_DIR"
          fi

      - name: Install platform-dependent packages
        shell: bash
        run: |
          # Install platform-dependent packages with flexible constraints to allow platform-specific resolution
          if [ -f requirements/platform_dependent.txt ] && [ -s requirements/platform_dependent.txt ]; then
            echo "Installing platform-dependent packages..."
            python -m pip install -r requirements/platform_dependent.txt --cache-dir "$PIP_CACHE_DIR" || echo "Some platform-dependent packages may not be available on this platform, continuing..."
          else
            echo "No platform-dependent packages to install."
          fi

      - name: Optional post-upgrades (datasets/fsspec etc)
        shell: bash
        env:
          APPLY_POST_UPGRADES: ${{ vars.APPLY_POST_UPGRADES || '1' }}
        run: |
          if [ "${APPLY_POST_UPGRADES}" = "1" ] && [ -s requirements/post_upgrades.txt ]; then
            echo "Applying post-upgrades..."
            python -m pip install --upgrade -r requirements/post_upgrades.txt --cache-dir "$PIP_CACHE_DIR"
          else
            echo "Skipping post-upgrades (either disabled or file empty)."
          fi

      - name: Run pyright type check
        shell: bash
        run: |
          pyright -p pyproject.toml
