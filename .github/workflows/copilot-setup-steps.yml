name: "Copilot Setup Steps"

on:
  workflow_dispatch:
  push:
    paths:
      - .github/workflows/copilot-setup-steps.yml
  pull_request:
    paths:
      - .github/workflows/copilot-setup-steps.yml

jobs:
  copilot-setup-steps:
    runs-on: ubuntu-latest
    environment: copilot
    env:
      # IT_CI_LOG_LEVEL: ${{ vars.IT_CI_LOG_LEVEL || 'INFO' }}
      # CI_RESOURCE_MONITOR: ${{ vars.CI_RESOURCE_MONITOR || '0' }}
      IT_USE_CT_COMMIT_PIN: "1"
      WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}
      HF_GATED_PUBLIC_REPO_AUTH_KEY: ${{ secrets.HF_GATED_PUBLIC_REPO_AUTH_KEY }}
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          lfs: true
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Set up venv and install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip setuptools wheel build
          # Prefer pinned CI requirements if present
          if [ -f requirements/ci/requirements.txt ]; then
            pip install --no-deps -r requirements/ci/requirements.txt
          else
            python -m pip install '.[test,examples,lightning]' -c requirements/ci_constraints.txt
          fi
          # Optional post-upgrades (disabled by default)
          if [ "${APPLY_POST_UPGRADES}" = "1" ] && [ -s requirements/post_upgrades.txt ]; then
            pip install --upgrade -r requirements/post_upgrades.txt
          fi
          pip list
        env:
          APPLY_POST_UPGRADES: ${{ vars.APPLY_POST_UPGRADES || '1' }}
      - name: Setup pyright, precommit and git lfs
        shell: bash
        run: |
          # Install pyright, pre-commit, and git-lfs
          pip install --upgrade pyright pre-commit git-lfs
          pyright -p pyproject.toml
          pre-commit install
          git lfs install
      - name: Network & firewall diagnostics (helpful when firewall is re-enabled)
        if: always()
        shell: bash
        run: |
          echo "Collecting network diagnostics for debugging firewall issues..."
          uname -a > /tmp/ci_net_diag.txt || true
          if command -v nft >/dev/null 2>&1; then
            sudo nft list ruleset > /tmp/nft_rules.txt 2>/dev/null || true
          else
            sudo iptables-save > /tmp/iptables_save.txt 2>/dev/null || true
          fi
          ss -tunlp > /tmp/ss_list.txt 2>/dev/null || true
          curl -v --connect-timeout 10 https://pypi.org/simple/ > /tmp/pypi_simple.txt 2>&1 || true
          git ls-remote https://github.com/python-poetry/poetry.git > /tmp/git_ls_remote.txt 2>&1 || true
          tar -czf /tmp/network-diagnostics.tar.gz /tmp/nft_rules.txt /tmp/iptables_save.txt /tmp/ss_list.txt /tmp/pypi_simple.txt /tmp/git_ls_remote.txt || true
      - name: Upload network diagnostics artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: network-diagnostics
          path: /tmp/network-diagnostics.tar.gz
      - name: Run Copilot setup steps
        run: echo "Copilot setup steps completed successfully."
