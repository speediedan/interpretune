[build-system]
# we require a setuptools version with PEP 639 support
requires = [
    "setuptools>=77.0.0",
    "wheel",
]
build-backend = "setuptools.build_meta"

[project]
name = "interpretune"
dynamic = ["version"]
authors = [{name = "Daniel Dale", email = "danny.dale@gmail.com"}]
license = "Apache-2.0"
license-files = ["LICENSE*"]
requires-python = ">=3.10"
keywords = ["llm", "reasoning", "interpretability", "fine-tuning", "finetuning"]
classifiers = [
            "Environment :: Console",
            "Natural Language :: English",
            "Development Status :: 5 - Production/Stable",
            "Intended Audience :: Developers",
            "Topic :: Scientific/Engineering :: Artificial Intelligence",
            "Topic :: Scientific/Engineering :: Image Recognition",
            "Topic :: Scientific/Engineering :: Information Analysis",
            "Operating System :: OS Independent",
            "Programming Language :: Python :: 3",
            "Programming Language :: Python :: 3.10",
            "Programming Language :: Python :: 3.11",
            "Programming Language :: Python :: 3.12",
]
description = "A package to support LLM reasoning and interpretability experiments at a level of abstraction that is both powerfully flexible and convenient"
readme = "README.md"
dependencies = [
    "transformer_lens >= 2.15.4",
    "sae_lens >= 6.3.1",  # use new sae_lens API
    "torch >=2.7.1",
    "tabulate >= 0.9.0",
    "datasets >= 2.2.0",
    "jsonargparse[signatures] >= 4.35.0",  # replace this req once adding fts req
    # "finetuning-scheduler[possible_future_it_plugin] >= 2.5.0",
]

[project.urls]
"Homepage" = "https://github.com/speediedan/interpretune"
"Bug Tracker" = "https://github.com/speediedan/interpretune/issues"
"Documentation" = "https://interpretune.readthedocs.io/en/stable/"
"Source Code" = "https://github.com/speediedan/interpretune"

[project.entry-points."console_scripts"]
interpretune = "interpretune.base.components.cli:bootstrap_cli"
interpretune-install-circuit-tracer = "interpretune.tools.install_circuit_tracer:main"

[project.optional-dependencies]

lightning = [
    # TODO: revert this FTS commit pin and/or old FTS version once lightning publishes a new release
    # "finetuning-scheduler @ git+https://github.com/speediedan/finetuning-scheduler.git@44a8e62fdc0fa9b08ef770160e2fa25a89f389f4",
    #"finetuning-scheduler[examples, cli, extra] >= 2.5.0",
    "finetuning-scheduler >= 2.5.0",
    "bitsandbytes",
    "peft",
]

examples = [
"wandb",
"torch-tb-profiler",
"notebook",
"jupyterlab",
"ipywidgets",
"jupytext >= 1.10",  # converting notebook source .py to .ipynb
"nbval >= 0.9.6",  # testing the notebook
"python-dotenv",
"plotly",
"gdown",
"evaluate",
"scikit-learn",
"neuronpedia",
# TODO: add our packaged circuit-tracer dep (either origin or fork) once it is available and remove the
#       `install_circuit_tracer` tool
# "circuit-tracer @ git+https://github.com/speediedan/circuit-tracer.git@6c74ea291c410bb3391e572cd6a8d020be714922",
]

docs = [
"sphinx >=4.0,<5.0 ",
"myst-parser >= 0.18.1",
"nbsphinx >= 0.8.5",
"pandoc >= 1.0",
"docutils >= 0.16",
"sphinxcontrib-fulltoc >= 1.0",
"sphinxcontrib-mockautodoc",
"sphinx-autodoc-typehints >= 1.16",
"sphinx-paramlinks >= 0.5.1",
"sphinx-togglebutton >= 0.2",
"sphinx-copybutton >= 0.3",
"typing-extensions",
"jinja2 >= 3.0.0,<3.1.0",
"pt_lightning_sphinx_theme @ git+https://github.com/speediedan/lightning_sphinx_theme.git@057f4c3e669948bc618eec1688b016f07140cc0d",
]

test = [
"coverage >= 6.4",
"pytest >= 6.0",
"pytest-rerunfailures >= 10.2",
"twine >= 3.2",
"pyright >= 1.1.365",
"pre-commit >= 1.0",
"psycopg",
"toml",
"pip-tools",
"huggingface_hub[hf_xet]",
]


[tool.setuptools.dynamic]
version = {attr = "interpretune.__about__.__version__"}

[tools.setuptools]
package-dir = {"" = "src"}
include-package-data = true
zip-safe = false

[tool.setuptools.packages.find]
where = ["src"]
namespaces = true

[tool.setuptools.package-data]
#"it_examples.config.experiments" = ["*.yaml"]
#"it_examples.config.ft_schedules" = ["*.yaml"]
#"it_examples.config.global" = ["*.yaml"]
#"it_examples.config.global.defaults" = ["*.yaml"]
#"it_examples.config.lightning.experiments" = ["*.yaml"]
#"it_examples.config.lightning.ft_schedules" = ["*.yaml"]
#"it_examples.config.lightning.shared" = ["*.yaml"]
"*" = ["*.yaml"]

[tool.ruff]
line-length = 120
# Enable Pyflakes `E` and `F` codes by default.
lint.select = [
    "E", "W",  # see: https://pypi.org/project/pycodestyle
    "F",  # see: https://pypi.org/project/pyflakes
]
lint.ignore = [
    "E731", # Do not assign a lambda expression, use a def
    "F722", # https://github.com/google/jaxtyping/blob/f18de2ce28e9e01beb1b8d4425ecb23e953075aa/docs/faq.md?plain=1#L21
]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".git",
    "docs",
    ".tox",
    "*.egg",
    "build",
    "temp",
    ".github/prompts",
]

output-format = "pylint"  # `format` was deprecated to prepare for upcoming ruff release, using `output-format` instead.


[tool.ruff.lint.per-file-ignores]
#"src/fts_examples/stable/ipynb_src/fts_superglue_nb.py" = ["E501","F401","F821"]
#"src/fts_examples/legacy/ipynb_src/fts_superglue_nb.py" = ["E501","F401","F821"]

[tool.ruff.lint.isort]
known-first-party = ["docs", "interpretune","tests"]
force-sort-within-sections = false
order-by-type = false

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.pyright]
autoSearchPaths=false
typeCheckingMode="standard"
include = [
    "src/interpretune/__about__.py",
    "src/interpretune/__init__.py",
    "src/interpretune/adapter_registry.py",
    "src/interpretune/protocol.py",
    "src/interpretune/session.py",
    # "src/interpretune/registry.py",                         # 15 errors - protocol compatibility, dict typing

    # Adapter files
    "src/interpretune/adapters/__init__.py",
    "src/interpretune/adapters/core.py",
    "src/interpretune/adapters/lightning.py",
    "src/interpretune/adapters/registration.py",
    "src/interpretune/adapters/transformer_lens.py",            # 13 → 0 errors - Fixed!
    "src/interpretune/adapters/sae_lens.py",                   # 12 → 0 errors - Fixed!
    "src/interpretune/adapters/circuit_tracer.py",             # 14 → 0 errors - Fixed!

    # Analysis files
    "src/interpretune/analysis/__init__.py",
    "src/interpretune/analysis/formatters.py",
    # "src/interpretune/analysis/core.py",                    # 78 errors - very complex type issues
    # "src/interpretune/analysis/ops/definitions.py",        # 19 errors - tensor operations, protocol issues
    "src/interpretune/analysis/ops/dynamic_module_utils.py",
    "src/interpretune/analysis/ops/__init__.py",
    "src/interpretune/analysis/ops/auto_columns.py",
    "src/interpretune/analysis/ops/dispatcher.py",
    "src/interpretune/analysis/ops/base.py",
    "src/interpretune/analysis/ops/hub_manager.py",
    "src/interpretune/analysis/ops/compiler/__init__.py",
    "src/interpretune/analysis/ops/compiler/cache_manager.py",
    "src/interpretune/analysis/ops/compiler/schema_compiler.py",

    # Base components
    "src/interpretune/base/call.py",
    "src/interpretune/base/hooks.py",
    "src/interpretune/base/modules.py",
    "src/interpretune/base/components/__init__.py",
    # "src/interpretune/base/components/mixins.py",           # 35 errors - optional member access, callable issues
    # "src/interpretune/base/components/cli.py",              # 24 errors - path operations, argument types
    "src/interpretune/base/components/core.py",             # 9 → 1 → 0 errors - Fixed!
    "src/interpretune/base/datamodules.py",

    # Config files
    "src/interpretune/config/__init__.py",
    "src/interpretune/config/circuit_tracer.py",
    "src/interpretune/config/datamodule.py",
    "src/interpretune/config/extensions.py",
    "src/interpretune/config/mixins.py",
    "src/interpretune/config/module.py",
    "src/interpretune/config/sae_lens.py",
    "src/interpretune/config/transformer_lens.py",
    "src/interpretune/config/analysis.py",                  # 12 → 9 → 0 errors - Fixed!
    "src/interpretune/config/runner.py",                    # 12 → 0 errors - Fixed!
    # "src/interpretune/config/shared.py",                    # 11 errors - type variable usage, tuple operations


    # Extensions
    "src/interpretune/extensions/__init__.py",
    "src/interpretune/extensions/memprofiler.py",
    "src/interpretune/extensions/neuronpedia.py",
    "src/interpretune/extensions/debug_generation.py",

    # Runners
    "src/interpretune/runners/__init__.py",
    # "src/interpretune/runners/analysis.py",                 # 28 errors - protocol mismatches, argument types
    "src/interpretune/runners/core.py",

    # Tools
    "src/interpretune/tools/",

    # Utils
    "src/interpretune/utils/__init__.py",
    "src/interpretune/utils/data_movement.py",
    "src/interpretune/utils/exceptions.py",
    "src/interpretune/utils/import_utils.py",
    "src/interpretune/utils/logging.py",
    "src/interpretune/utils/schema_validation.py",  # warnings only
    "src/interpretune/utils/tokenization.py",
    "src/interpretune/utils/warnings.py",

]
exclude = [
    # patch of external code
    "src/interpretune/utils/patched_tlens_generate.py",
]

reportMissingTypeStubs = false
reportUnknownMemberType = "none"
reportUnknownArgumentType = "none"
reportUnknownVariableType = "none"
reportUntypedFunctionDecorator = "none"
reportUnnecessaryIsInstance = "none"
reportUnnecessaryComparison = "none"
reportConstantRedefinition = "none"
reportUnknownLambdaType = "none"
reportPrivateUsage = "none"
reportDeprecated = "none"
reportPrivateImportUsage = "none"
reportAttributeAccessIssue = "none"
reportUnusedImport = "none"
reportUnusedVariable = "none"
reportImplicitOverride = "none"
reportNoReturnInFunction = "none"
reportMissingImports = false

[tool.coverage.run]
source = ["src/interpretune"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "warnings",
    "pass",
    "raise NotImplementedError",
    "except Exception",
]

exclude_also = [
    "if TYPE_CHECKING:",
]

omit = [
# we test this simple harness but do not include it in coverage to avoid incurring the configuration
# complexity associated with subprocess coverage (https://coverage.readthedocs.io/en/latest/subprocess.html)
# If we use subprocesses for testing beyond merely this 3 line wrapper file, it may make sense to set
# COVERAGE_PROCESS_START, dynamically add a sitecustomize.py etc. in the CI flow to enable subprocess coverage.
# "src/interpretune/run_experiment.py",
]

[tool.pytest.ini_options]
pythonpath = "tests"
norecursedirs = [
    ".git",
    ".github",
    "dist",
    "build",
    "docs",
]
#addopts = "--strict-markers --doctest-modules --color=yes --disable-pytest-warnings --ignore-glob='src/fts_examples/*/ipynb_src/*.py' --ignore='.actions/assistant.py'"
addopts = "--strict-markers --doctest-modules --color=yes --disable-pytest-warnings --ignore-glob='tests/*_parity/*.py' --ignore-glob='src/it_examples/notebooks/**/*.py'"
junit_duration_report = "call"
tmp_path_retention_count = 30  # allow retention of more successful runs during profiling result generation (default 3)


[tool.jupytext]
notebook_metadata_filter = "-all"

[tool.jupytext.formats]
"notebooks/" = "ipynb"
"scripts/" = "py"

[tool.ci_pinning]
# default pinning behavior for packages not listed explicitly: "major", "minor", "exact", or "none"
default = "major"

# packages to never relax (keep exact/strict behavior)
strict = ["torch"]

# packages with platform-dependent versions that should be excluded from pinning
# these will be installed separately with flexible constraints to allow platform-specific resolution
# only applies to direct dependencies we specify in pyproject.toml
platform_dependent = ["bitsandbytes"]

# packages that should be applied as post-upgrades (package -> desired_version)
[tool.ci_pinning.post_upgrades]
datasets = "==4.0.0"
fsspec = ">=2025.3.0"
